
0-1 knapsack Theory:

The 0-1 Knapsack problem can be solved using dynamic programming. The key idea behind this approach is to build a table (often referred to as a "memoization table" or "DP table") to store the maximum value that can be achieved at each combination of items and available knapsack capacity. 

The table is typically a two-dimensional array where one dimension represents the items, and the other represents the remaining knapsack capacities. 

Dynamic Programming:

Dynamic programming is a technique used to solve problems by breaking them down into smaller subproblems

The value in the bottom-right cell of this table represents the maximum value achievable.

Branch and Bound:

Branch and bound is a strategy used to solve optimization problems, particularly combinatorial optimization problems, where the goal is to search for the best solution among a finite set of possibilities.


Algorithm :

1.Create a table of size (n+1) x (W+1) to store maximum values, initialized to 0.

2.For each item i from 1 to n:

   For each possible knapsack capacity w from 0 to W, do the following:
      If the weight of item i is greater than w, set table[i][w] to table[i-1][w].
      If the weight of item i is less than or equal to w, set table[i][w] to the maximum of:
      table[i-1][w] (not selecting item i).
      table[i-1][w-weight[i]] + value[i] (selecting item i).

3.The value in table[n][W] is the maximum achievable value in the knapsack.

4.To find the selected items, backtrack from table[n][W] by considering the values in the table.

5.Return the maximum value and the list of selected items.